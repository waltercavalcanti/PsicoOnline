@page "/grauparentesco"
@page "/grauparentesco/{id:int}"
@inject IGrauParentescoService GrauParentescoService

@if (Id == null)
{
	<PageTitle>Criar Grau de Parentesco</PageTitle>
	<MudText Typo="Typo.h5">Adicionar Grau de Parentesco</MudText>
}
else
{
	<PageTitle>Editar Grau de Parentesco: @grauParentesco.Descricao</PageTitle>
	<MudText Typo="Typo.h5">Editar Grau de Parentesco: @grauParentesco.Descricao</MudText>
}
<br />
<EditForm Model="grauParentesco" OnValidSubmit="SubmeterAsync">
	<DataAnnotationsValidator />
	<div>
		<MudTextField Label="Descrição" Variant="Variant.Outlined" Margin="Margin.Dense" Clearable="true" Immediate="true" Counter="100"
					  @bind-Value="grauParentesco.Descricao" For="@(() => grauParentesco.Descricao)" />
	</div>
	<MudButton Variant="Variant.Outlined" EndIcon="@Icons.Material.Filled.Save" Color="Color.Primary" ButtonType="ButtonType.Submit">@btnText</MudButton>&nbsp;
	@if (Id != null)
	{
		<MudButton Variant="Variant.Outlined" EndIcon="@Icons.Material.Filled.Delete" Color="Color.Error" @onclick="DeleteGrauParentescoAsync">Excluir</MudButton>
	}
</EditForm>

@code {
	[Parameter]
	public int? Id { get; set; }

	string btnText = string.Empty;

	GrauParentescoModel grauParentesco = new GrauParentescoModel();

	protected override async Task OnInitializedAsync()
	{
		btnText = Id == null ? "Salvar" : "Atualizar";
	}

	protected override async Task OnParametersSetAsync()
	{
		if (Id != null)
		{
			grauParentesco = await GrauParentescoService.GetGrauParentescoByIdAsync((int)Id);
		}
	}

	async Task SubmeterAsync()
	{
		if (Id == null)
		{
			await GrauParentescoService.AddGrauParentescoAsync(grauParentesco);
		}
		else
		{
			await GrauParentescoService.UpdateGrauParentescoAsync(grauParentesco);
		}
	}

	async Task DeleteGrauParentescoAsync()
	{
		await GrauParentescoService.DeleteGrauParentescoAsync(grauParentesco.Id);
	}
}
